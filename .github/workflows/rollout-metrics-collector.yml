name: Rollout Metrics Collector

on:
  schedule:
    # Run every hour to collect and aggregate metrics (offset to avoid queue congestion)
    - cron: '33 * * * *'
  workflow_dispatch:
    inputs:
      time_window:
        description: 'Time window for metrics collection (hours)'
        default: '24'
        type: string
      include_performance:
        description: 'Include detailed performance metrics'
        default: 'true'
        type: boolean

jobs:
  collect-rollout-metrics:
    runs-on: ubuntu-latest
    timeout-minutes: 15
    
    steps:
      - name: Generate GitHub App token
        id: app-token
        uses: actions/create-github-app-token@v1
        with:
          app-id: ${{ vars.CONTRIBUTOR_APP_ID }}
          private-key: ${{ secrets.CONTRIBUTOR_APP_PRIVATE_KEY }}
          
      - name: Checkout main repository
        uses: actions/checkout@v4
        with:
          repository: bdougie/contributor.info
          token: ${{ steps.app-token.outputs.token }}
          
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Collect rollout metrics
        run: node scripts/rollout/metrics-aggregator.js
        env:
          GITHUB_TOKEN: ${{ steps.app-token.outputs.token }}
          SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
          SUPABASE_SERVICE_KEY: ${{ secrets.SUPABASE_SERVICE_KEY }}
          SENTRY_DSN: ${{ secrets.SENTRY_DSN }}
          TIME_WINDOW_HOURS: ${{ inputs.time_window || '24' }}
          INCLUDE_PERFORMANCE: ${{ inputs.include_performance || 'true' }}
          ENVIRONMENT: 'production'
          
      - name: Analyze performance trends
        run: node scripts/rollout/performance-analyzer.js
        env:
          GITHUB_TOKEN: ${{ steps.app-token.outputs.token }}
          SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
          SUPABASE_SERVICE_KEY: ${{ secrets.SUPABASE_SERVICE_KEY }}
          TIME_WINDOW_HOURS: ${{ inputs.time_window || '24' }}
          
      - name: Send metrics to Sentry
        run: node scripts/rollout/alert-manager.js
        env:
          SENTRY_DSN: ${{ secrets.SENTRY_DSN }}
          SENTRY_AUTH_TOKEN: ${{ secrets.SENTRY_AUTH_TOKEN }}
          ENVIRONMENT: 'production'
          METRICS_TYPE: 'performance'
          
      - name: Upload metrics report
        uses: actions/upload-artifact@v4
        with:
          name: rollout-metrics-${{ github.run_number }}
          path: |
            rollout-metrics-*.json
            performance-analysis-*.json
            trend-analysis-*.json
          retention-days: 30
          
      - name: Comment on performance trends
        if: github.event_name == 'workflow_dispatch'
        uses: actions/github-script@v7
        with:
          github-token: ${{ steps.app-token.outputs.token }}
          script: |
            const fs = require('fs');
            const path = './performance-analysis-latest.json';
            
            if (fs.existsSync(path)) {
              const analysis = JSON.parse(fs.readFileSync(path, 'utf8'));
              
              const comment = `## 📊 Rollout Performance Analysis
              
              **Time Window**: ${analysis.timeWindow} hours
              **Total Jobs Processed**: ${analysis.totalJobs}
              
              ### Processor Performance
              - **Inngest**: ${analysis.inngest.successRate}% success rate (${analysis.inngest.avgProcessingTime}ms avg)
              - **GitHub Actions**: ${analysis.githubActions.successRate}% success rate (${analysis.githubActions.avgProcessingTime}ms avg)
              
              ### Rollout Health
              - **Error Rate**: ${analysis.errorRate}% ${analysis.errorRate > 5 ? '⚠️ Above threshold!' : '✅ Within limits'}
              - **Cost Savings**: ${analysis.costSavings}% vs Inngest-only
              - **Repositories Affected**: ${analysis.repositoriesCount}
              
              ### Recommendations
              ${analysis.recommendations.map(r => `- ${r}`).join('\n')}
              
              *Generated at ${new Date().toISOString()}*`;
              
              // Post as discussion or issue comment if needed
              console.log(comment);
            }